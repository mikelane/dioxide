"""Type stubs for Rust core module."""

from collections.abc import Callable
from typing import TypeVar

T = TypeVar('T')

class Container:
    """Rust-backed container implementation."""

    def __init__(self) -> None: ...
    def register_instance(self, py_type: type[T], instance: T) -> None: ...
    def register_class(self, py_type: type[T], implementation: type[T]) -> None: ...
    def register_singleton_factory(self, py_type: type[T], factory: Callable[[], T]) -> None: ...
    def register_transient_factory(self, py_type: type[T], factory: Callable[[], T]) -> None: ...
    def resolve(self, py_type: type[T]) -> T: ...
    def is_empty(self) -> bool: ...
    def __len__(self) -> int: ...
